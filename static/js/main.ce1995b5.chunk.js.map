{"version":3,"sources":["bar_chart_maker.js","metro/metrolink_stations.js","chart_helper.js","components/CallTypeCheckbox.jsx","components/CallTypeSelection.jsx","components/DateSelect.jsx","metro/call_types.js","components/CallsByTimeAndStation.jsx","App.js","serviceWorker.js","index.js"],"names":["BarChartMaker","ChartDataJson","CallToCount","className","_","map","FileData","FileName","substring","indexOf","key","style","width","MetrolinkStations","AllStations","RedStations","BlueStations","ChartHelper","GetCallTypes","$","console","log","this","parent","text","CreateTimeValuesChart","DivSelector","Data","CallsToCount","MetrolinkCalls","where","Category","SelectedMetrolinkCalls","filter","Row","contains","CallType","CapitalizedStationNames","ThisStation","toUpperCase","CallsByStation","groupBy","ThisCall","find","Location","ChartSvg","d3","html","append","attr","selectAll","data","enter","d","i","Height","length","size","Width","each","CallsAtStation","StationName","StationIndex","Station","MomentDate","Moment","Time","TimeInt","hour","minutes","CallTypeCheckbox","ClickBox","evt","preventDefault","props","CheckedStatus","OnChangeFunc","BoxStyle","ThisCallType","CallTypeDisplayText","toLowerCase","backgroundColor","label","onClick","type","value","checked","onChange","textTransform","Component","defaultProps","error","CallTypeSelection","HandleChildChange","ChangedCallType","NewStatus","CheckedTypes","state","CurrentlyChecked","push","IndexToRemove","splice","setState","DefaultChecked","AllCallTypes","CallTypes","CallTypeCheckboxes","id","DateSelect","HandleOnChange","EnteredValue","target","IsValidDate","moment","isValid","ValidDate","DateValue","OnUpdateFunc","Type","Default","InputStyle","color","padding","React","AllPublicSafetyData","AllPublicSafetyData_2017","concat","AllPublicSafetyData_2018","AllPublicSafetyData_2019","CallsByTimeAndStation","GetDataInDateRange","StartDate","EndDate","UpdateDateRange","DateType","NewValue","object","UpdateCallTypes","NewCurrentlyChecked","CallTypesToDisplay","UpdateTimeValuesChart","SvgHolderId","ReadyForUpdate","render","DefaultCallTypes","DefaultStart","DefaultEnd","UpdateButtonStyle","margin","display","justifyContent","CheckboxContainerId","DataRows_2018","PublicSafetyData_2018","DataRows_2019","PublicSafetyData_2019","App","fontSize","clear","marginTop","paddingLeft","float","fontStyle","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce1995b5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport _ from \"underscore\";\r\n\r\nconst BarChartScale = 3;\r\n\r\nconst BarChartMaker = (ChartDataJson, CallToCount) => {\r\n    // We're assuming chart data is objects containing each week's calls of each\r\n    // type, keyed on that week's log file name (i.e. \"YYYY-MM-DD.pdf\")\r\n    return <div className='BarChart'>\r\n        {_.map(ChartDataJson, (FileData, FileName) => {\r\n            let WeekName = FileName.substring(0, FileName.indexOf(\".\"));\r\n            return <div key={FileName}>     \r\n                <div>           \r\n                    <div className='BarChartBox' style={{width:BarChartScale*FileData[CallToCount]}}>\r\n                        {FileData[CallToCount]}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        })}\r\n    </div>\r\n}\r\n\r\nexport default BarChartMaker;","const MetrolinkStations = {\r\n    AllStations: [\r\n        'Shiloh Scott',\r\n        'College',\r\n        'Belleville',\r\n        'Swansea',\r\n        'Memorial Hospital',\r\n        'Fairview Heights',\r\n        'Washington Park',\r\n        'Jackie Joyner-Kersee',\r\n        'Emerson Park',\r\n        '5th & Missouri',\r\n        'East Riverfront',\r\n        'Lacledes Landing',\r\n        'Convention Center',\r\n        '8th & Pine',\r\n        'Stadium',\r\n        'Civic Center',\r\n        'Union Station',\r\n        'Grand',\r\n        'Cortex',\r\n        'Central West End',\r\n        'Forest Park',\r\n        'Delmar',\r\n        'Wellston',\r\n        'Rock Road',\r\n        'UMSL South',\r\n        'UMSL North',\r\n        'North Hanley',\r\n        'Lambert East Terminal',\r\n        'Lambert Main Terminal',\r\n        'Skinker',\r\n        'University City-Big Bend',\r\n        'Forsyth',\r\n        'Clayton',\r\n        'Richmond Heights',\r\n        'Brentwood',\r\n        'Maplewood',\r\n        'Sunnen',\r\n        'Shrewsbury'\r\n    ],\r\n\r\n    RedStations: [\r\n        'Shiloh Scott',\r\n        'College',\r\n        'Belleville',\r\n        'Swansea',\r\n        'Memorial Hospital',\r\n        'Delmar',\r\n        'Wellston',\r\n        'Rock Road',\r\n        'UMSL South',\r\n        'UMSL North',\r\n        'North Hanley',\r\n        'Lambert East Terminal',\r\n        'Lambert Main Terminal',\r\n    ],\r\n\r\n    BlueStations: [\r\n        'Skinker',\r\n        'University City-Big Bend',\r\n        'Forsyth',\r\n        'Clayton',\r\n        'Richmond Heights',\r\n        'Brentwood',\r\n        'Maplewood',\r\n        'Sunnen',\r\n        'Shrewsbury'\r\n    ]\r\n}\r\n\r\nexport default MetrolinkStations;","import _ from \"underscore\";\r\nimport $ from 'jquery';\r\nimport * as d3 from 'd3';\r\nimport Moment from 'moment';\r\nimport MetrolinkStations from './metro/metrolink_stations';\r\nimport CallsByTimeAndStation from \"./components/CallsByTimeAndStation\";\r\n\r\nconst ChartHelper = {   \r\n    \r\n    GetCallTypes: () => {\r\n        let CheckedCallTypes = $('#CallTypeCheckboxes input:checked').map(function() {\r\n            console.log(this);\r\n            return $(this).parent().text()\r\n        });\r\n        \r\n        return CheckedCallTypes;\r\n    },\r\n    \r\n    CreateTimeValuesChart: (DivSelector, Data, CallsToCount) => {\r\n        let Width = 780;\r\n        let Height = 750;        \r\n\r\n        const MetrolinkCalls = _.where(Data, {Category:\"METROLINK\"});\r\n        const SelectedMetrolinkCalls = _.filter(MetrolinkCalls, (Row) => {\r\n            return _.contains(CallsToCount, Row.CallType);\r\n        });\r\n\r\n        const CapitalizedStationNames = _.map(MetrolinkStations.AllStations, (ThisStation) => { return ThisStation.toUpperCase(); });\r\n        const CallsByStation = _.groupBy(\r\n            SelectedMetrolinkCalls, \r\n            (ThisCall) => {\r\n                return _.find(CapitalizedStationNames, (ThisStation) => {\r\n                    if (ThisCall.Location.indexOf(ThisStation+\" -\") != -1) { return true; } else {\r\n                        // console.error(ThisCall.Location)\r\n                    }\r\n                });\r\n            }\r\n        );\r\n\r\n        let ChartSvg = d3.select(DivSelector)\r\n                .html(\"\")\r\n                .append('svg')\r\n                .attr('width', Width)\r\n                .attr('height', Height)\r\n                // .data(Data);\r\n\r\n        ChartSvg.selectAll('text.timeLabel')\r\n                .data(['4am', '6am', '8am', '10am', '12pm', '2pm', '4pm', '6pm', '8pm', '10pm', '12am', '2am'])\r\n                .enter()\r\n                .append('text')\r\n                .attr('class', 'timeLabel')\r\n                .text(function(d, i) {\r\n                  return d;\r\n                })\r\n                .attr(\"x\", function(d, i) {\r\n                  return i * ((Width - 180) / 12) + 180;\r\n                })\r\n                .attr(\"y\", Height - 10)\r\n                .attr(\"text-anchor\", \"middle\");\r\n\r\n        ChartSvg.selectAll('text.stationLabel')\r\n                .data(MetrolinkStations.AllStations)\r\n                .enter()\r\n                .append('text')\r\n                .attr('class', 'stationLabel')\r\n                .text(function(d, i) {\r\n                  return d;\r\n                })\r\n                .attr(\"x\", 160)\r\n                .attr(\"y\", function(d, i) {\r\n                  return ((Height - 40) / MetrolinkStations.AllStations.length) * i + 10;\r\n                })\r\n                .attr('text-anchor', 'end')\r\n                .attr('fill', function(d, i) {\r\n                  if(_.contains(MetrolinkStations.RedStations, d)) {\r\n                    return 'red';\r\n                  } else if(_.contains(MetrolinkStations.BlueStations, d)) {\r\n                    return 'blue';\r\n                  } else {\r\n                    return 'black';\r\n                  }\r\n        });\r\n\r\n        ChartSvg.selectAll('text.stationCount')\r\n                .data(MetrolinkStations.AllStations)\r\n                .enter()\r\n                .append('text')\r\n                .attr('class', 'stationCount')\r\n                .text(function(d, i) {                  \r\n                  return _.size(CallsByStation[d.toUpperCase()]);\r\n                })\r\n                .attr(\"x\", Width-5)\r\n                .attr(\"y\", function(d, i) {\r\n                  return ((Height - 40) / MetrolinkStations.AllStations.length) * i + 10;\r\n                })\r\n                .attr('text-anchor', 'end');\r\n\r\n        console.log(CallsByStation);\r\n\r\n        _.each(CallsByStation, function(CallsAtStation, StationName) {\r\n        \r\n            ChartSvg.selectAll('svg')\r\n            .append('text')\r\n            // .attr('class', 'stationLabel')\r\n            .text(_.size(CallsAtStation))\r\n            .attr(\"x\", Width-20)\r\n            .attr(\"y\", function (d,i) {\r\n              var StationIndex = _.indexOf(_.map(MetrolinkStations.AllStations, (Station) => {return Station.toUpperCase();}), StationName);\r\n              return ((Height - 40) / MetrolinkStations.AllStations.length) * StationIndex + 10 - 4;\r\n            })\r\n              .data(CallsAtStation)\r\n              .enter()\r\n              .append('circle')\r\n              .attr('class', 'CallCircle')\r\n              .attr(\"cx\", function(d, i) {\r\n                let MomentDate = new Moment(d.Time)\r\n                var TimeInt = MomentDate.hour() - 3;\r\n                if (TimeInt < 0) {\r\n                  TimeInt = 24 + TimeInt;\r\n                }\r\n                TimeInt = TimeInt + MomentDate.minutes() / 60;\r\n                return TimeInt/2 * (Width - 180)/12 + 180;\r\n              })\r\n              .attr(\"cy\", function (d, i) {\r\n                var StationIndex = _.indexOf(_.map(MetrolinkStations.AllStations, (Station) => {return Station.toUpperCase();}), StationName);\r\n                return ((Height - 40) / MetrolinkStations.AllStations.length) * StationIndex + 10 - 4;\r\n              })\r\n              .attr(\"r\", 4)\r\n              .attr('fill', 'red')\r\n              .attr('opacity', 0.3);\r\n          });\r\n    }\r\n}\r\n\r\nexport default ChartHelper","import React, { Component } from 'react';\r\n\r\nclass CallTypeCheckbox extends Component {\r\n\r\n    static defaultProps = {\r\n        CheckedStatus: false,\r\n        OnChangeFunc: () => { console.error('No OnChangeFunction'); }\r\n    }\r\n\r\n    ClickBox = (evt) => {\r\n        evt.preventDefault();\r\n        const { CallType, CheckedStatus } = this.props;\r\n        this.props.OnChangeFunc(CallType, !CheckedStatus);\r\n    }\r\n    \r\n    render() {\r\n        const CapitalizeStyle = {textTransform:'capitalize'};\r\n        const ThisCallType = this.props.CallType;\r\n        const CallTypeDisplayText = ThisCallType.toLowerCase();\r\n\r\n        let BoxStyle;\r\n        if (this.props.CheckedStatus) {\r\n            BoxStyle = {backgroundColor:'black'};\r\n        } else {\r\n            BoxStyle = {backgroundColor:'#999'};\r\n        }    \r\n\r\n        return <label label={ThisCallType} onClick={this.ClickBox} style={BoxStyle}>\r\n            <input type='checkbox' value={ThisCallType} checked={this.props.CheckedStatus} onChange={(evt) => {evt.preventDefault();} }/>\r\n            <span style={CapitalizeStyle}>{CallTypeDisplayText}</span> \r\n        </label>;\r\n    }\r\n}\r\n\r\nexport default CallTypeCheckbox;","import React, { Component } from 'react';\r\nimport _ from 'underscore';\r\n\r\nimport CallTypeCheckbox from './CallTypeCheckbox';\r\n\r\nconst DefaultCallTypes = [\r\n    'FARE VIOLATION',\r\n    'FARE DISPUTE',\r\n    'SICK CASE',\r\n    'DRUG VIOLATION',\r\n    'SMOKING ON TRAIN',\r\n    'SLEEPER',\r\n    'ARREST',\r\n    'DISTURBANCE',\r\n    'INTOXICATED SUBJECT',\r\n    'THEFT',\r\n    'PUBLIC URINATION'\r\n]\r\n\r\nclass CallTypeSelection extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {CurrentlyChecked:this.props.DefaultChecked};\r\n    }\r\n\r\n    static defaultProps = {\r\n        CallTypes: DefaultCallTypes,\r\n        DefaultChecked: ['FARE VIOLATION']\r\n    }\r\n\r\n    HandleChildChange = (ChangedCallType, NewStatus) => {\r\n        let CheckedTypes = this.state.CurrentlyChecked;\r\n        if(NewStatus) {\r\n            // Type was added\r\n            CheckedTypes.push(ChangedCallType);\r\n        } else {\r\n            // Type was removed\r\n            let IndexToRemove = this.state.CurrentlyChecked.indexOf(ChangedCallType);\r\n            CheckedTypes.splice(IndexToRemove, 1);\r\n        }   \r\n        this.setState({CurrentlyChecked:CheckedTypes}, () => {\r\n            this.props.OnChangeFunc(this.state.CurrentlyChecked);\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const AllCallTypes = this.props.CallTypes;\r\n        const CallTypeCheckboxes = _.map(AllCallTypes, (ThisCallType) => {\r\n            return <CallTypeCheckbox CallType={ThisCallType} key={ThisCallType} CheckedStatus={_.contains(this.state.CurrentlyChecked, ThisCallType) ? true : false} OnChangeFunc={this.HandleChildChange} />\r\n        }, this)\r\n\r\n        return <div id={this.props.id}>\r\n            {CallTypeCheckboxes}\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default CallTypeSelection;","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\n\r\nclass DateSelect extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            DateValue:this.props.Default,\r\n            ValidDate:true\r\n        }\r\n    }\r\n\r\n    HandleOnChange = (evt) => {\r\n        const EnteredValue = evt.target.value;\r\n        const IsValidDate = moment(EnteredValue, 'YYYY-MM-DD', true).isValid();\r\n        this.setState({ValidDate:IsValidDate, DateValue:EnteredValue}, () => {\r\n            this.props.OnUpdateFunc(this.props.Type, (IsValidDate ? EnteredValue : false));\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const InputStyle = {backgroundColor: (this.state.ValidDate ? \"white\" : \"red\"), color: (this.state.ValidDate ? \"black\" : \"white\")};    \r\n        return <div style={{padding:'2px 10px'}}>\r\n            <span>{this.props.Type}: </span>\r\n            <input type=\"text\" onChange={this.HandleOnChange} value={this.state.DateValue} style={InputStyle} />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default DateSelect;","const AllCallTypes = [\r\n    'FARE VIOLATION',\r\n    'FARE DISPUTE',\r\n    'DISTURBANCE',\r\n    'SICK CASE',\r\n    'PASSENGER REMOVAL',\r\n    'SMOKING ON TRAIN',\r\n    'TRESPASSER',\r\n    'SLEEPER',\r\n    'ARREST',\r\n    'LOST PROPERTY/ARTICLE',\r\n    'THEFT',\r\n    'ASSAULT',\r\n    'CHECK THE WELFARE',\r\n    'SUSPICIOUS/UNATTENDED PACKAGE',\r\n    'ASSISTING OTHER AGENCY',\r\n    'SUSP PERSON',\r\n    'BUILDING CHECK',\r\n    'ACCIDENTAL INJURY',\r\n    'INTOXICATED SUBJECT',\r\n    'CONDITION ID',\r\n    'JUVENILE COMPLAINT',\r\n    'PUBLIC URINATION',\r\n    'DRUG VIOLATION',\r\n    'SHOTS FIRED',\r\n    'PASSENGER ASSIST',\r\n    'INDECENT EXPOSURE',\r\n    'SMOKING ON PROPERTY',\r\n    'LOITERING',\r\n    'SUSPICIOUS /UNATTENDED  PACKAGE',\r\n    'SUSPICIOUS /UNATTENDED PACKAGE',\r\n    'WEAPONS VIOLATION',\r\n    'INVESTIGATION',\r\n    'SOLICITING',\r\n    'ACCIDENT (BUS)',\r\n    'COURTESY WARNING',\r\n    'PERSON TRAPPED IN ELEVATOR',\r\n    'OPEN CONTAINER ALCOHOL',\r\n    'PROPERTY DAMAGE',\r\n    'FOUND PROPERTY/ARTICLE',\r\n    'ALARM',\r\n    'OBSERVATION',\r\n    'ABANDON VEHICLE',\r\n    'SUSPICIOUS VEHICLE',\r\n    'RESISTING',\r\n    'FIGHT',\r\n    'CHECK TRAIN FOR LOST PROPERTY',\r\n    'MOTORIST ASSIST',\r\n    'VANDALISM',\r\n    'CONVEYANCE',\r\n    'ATTEMPT ROBBERY',\r\n    'FIRE',\r\n    'STATION ASSIGNMENT',\r\n    'MISSING PERSON',\r\n    'GAMBLING',\r\n    'CITATION ISSUE',\r\n    'RECOVERED PROPERTY',\r\n    'ACCIDENT (CAR)',\r\n    'ANIMAL AT LARGE',\r\n    'DRINKING ON TRAIN',\r\n    'SUICIDAL SUBJECT',\r\n    'ROBBERY',\r\n    'CONTACT COMPLAINTANT',\r\n    'PANHANDLING',\r\n    'ACCIDENT (TRAIN)',\r\n    'ORDINANCE VIOLATION',\r\n    'POSSIBLE STOLEN VEHICLE',\r\n    'ASSIST',\r\n    'PARKING VIOLATION',\r\n    'FLOURISHING',\r\n    'UNRULY PATRON',\r\n    'PERSON DOWN',\r\n    'ACCIDENT (AGENCY VEHICLE)',\r\n    'STOLEN PROPERTY',\r\n    'ESCORT',\r\n    'UNFOUNDED',\r\n    'BICYCLE/SCOOTER REMOVAL',\r\n    'TOWED VEHICLE',\r\n    'SHOOTING',\r\n    'PERSON STRUCK',\r\n    'PEDESTRIAN CHECK',\r\n    'OPERATOR CONTACT',\r\n    'UNSECURE DOOR',\r\n    'MEDICAL EMERGENCY',\r\n    'PLATFORM CHECK',\r\n    'CRIMES FROM OTHER JURISDICTION',\r\n    'SUPPLEMENTAL REPORT',\r\n    'OFFICER IN NEED OF AIDE',\r\n    'PROCESSING HARD DRIVE',\r\n    'TRANSFER CHECK',\r\n    'SPECIAL EVENT DETAIL',\r\n    'SUMMONS RELEASE',\r\n    'STADIUM DETAIL(NONE BASEBALL)',\r\n    'INSPECTION',\r\n    'STREET LEVEL CHECK',\r\n    'BOMB THREAT'\r\n];\r\n\r\nexport default AllCallTypes;","import React, { Component } from 'react';\r\nimport _ from 'underscore';\r\nimport ChartHelper from '../chart_helper'\r\n\r\n// Components\r\nimport CallTypeSelection from './CallTypeSelection';\r\nimport DateSelect from './DateSelect'\r\n\r\n// Data\r\nimport AllCallTypes from '../metro/call_types'\r\nimport AllPublicSafetyData_2017 from '../output/2017-full-log-info.json';\r\nimport AllPublicSafetyData_2018 from '../output/2018-full-log-info.json';\r\nimport AllPublicSafetyData_2019 from '../output/2019-full-log-info.json';\r\n\r\nconst AllPublicSafetyData = AllPublicSafetyData_2017.concat(AllPublicSafetyData_2018, AllPublicSafetyData_2019);\r\n\r\nclass CallsByTimeAndStation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            CallTypesToDisplay:this.props.DefaultCallTypes,\r\n            StartDate:this.props.DefaultStart,\r\n            EndDate:this.props.DefaultEnd,\r\n            ReadyForUpdate:false\r\n        };\r\n    }\r\n    \r\n    static defaultProps = {\r\n        SvgHolderId: 'SvgHolder',\r\n        CheckboxContainerId: 'CallTypeCheckboxes',\r\n        DefaultCallTypes: ['FARE VIOLATION'],\r\n        DefaultStart:'2019-01-01', \r\n        DefaultEnd:'2019-09-30'\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.UpdateTimeValuesChart();\r\n    }\r\n\r\n    GetDataInDateRange = (StartDate, EndDate) => {\r\n        return _.filter(AllPublicSafetyData, (Row) => {\r\n            if(Row.Time > StartDate && Row.Time < EndDate) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n\r\n    UpdateDateRange = (DateType, NewValue) => {\r\n        this.setState(_.object([[DateType, NewValue], ['ReadyForUpdate', true]]));\r\n        \r\n    }\r\n\r\n    UpdateCallTypes = (NewCurrentlyChecked) => {\r\n        this.setState({CallTypesToDisplay:NewCurrentlyChecked}, () => {\r\n            this.UpdateTimeValuesChart();\r\n        });\r\n    }\r\n\r\n    UpdateTimeValuesChart = () => {\r\n        if(this.state.StartDate && this.state.EndDate) {\r\n            \r\n            ChartHelper.CreateTimeValuesChart(\r\n                \"#\"+this.props.SvgHolderId, \r\n                this.GetDataInDateRange(this.state.StartDate, this.state.EndDate), \r\n                this.state.CallTypesToDisplay\r\n            );\r\n            this.setState({ReadyForUpdate:false}, () => { this.render(); })\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const DateSelectBoxStyle ={width:800, margin:'10px auto', padding:'10px 0', display:'flex', justifyContent:'center', backgroundColor:'orange'}\r\n        const CheckboxContainerStyle = {width:800, margin:'10px auto'};\r\n        const UpdateButtonStyle = {padding:'1px 10px', backgroundColor:'orange', color:'orange'};\r\n        if(this.state.ReadyForUpdate) {\r\n            UpdateButtonStyle['backgroundColor'] = 'white';\r\n            UpdateButtonStyle['color'] = 'blue';\r\n            UpdateButtonStyle['cursor'] = 'pointer';\r\n        }\r\n\r\n        return <div>\r\n            <div id={this.props.SvgHolderId}>{/* Empty, will get filled by D3*/}</div>\r\n\r\n            <div style={DateSelectBoxStyle}>\r\n                <DateSelect Type='StartDate' Default={this.props.DefaultStart} OnUpdateFunc={this.UpdateDateRange}/>\r\n                <DateSelect Type='EndDate' Default={this.props.DefaultEnd} OnUpdateFunc={this.UpdateDateRange}/>\r\n                <div style={UpdateButtonStyle} onClick={this.UpdateTimeValuesChart}>Update</div>\r\n            </div>\r\n\r\n            <div style={CheckboxContainerStyle}>\r\n                <CallTypeSelection id={this.props.CheckboxContainerId} OnChangeFunc={this.UpdateCallTypes} CallTypes={AllCallTypes}/>\r\n            </div>\r\n        </div>\r\n\r\n    }\r\n}\r\n\r\nexport default CallsByTimeAndStation;","import React from 'react';\r\nimport './App.css';\r\nimport BarChartMaker from './bar_chart_maker';\r\n\r\nimport CallsByTimeAndStation from './components/CallsByTimeAndStation';\r\n\r\nimport PublicSafetyData_2018 from './output/2018-public-safety-logs.json'\r\nimport PublicSafetyData_2019 from './output/2019-public-safety-logs.json'\r\n\r\nimport AllPublicSafetyData_2017 from './output/2017-full-log-info.json';\r\n// console.log(PublicSafetyData_2018);\r\n\r\nconst DataRows_2018 = BarChartMaker(PublicSafetyData_2018, \"FARE VIOLATION\");\r\nconst DataRows_2019 = BarChartMaker(PublicSafetyData_2019, \"FARE VIOLATION\");\r\n\r\nconst DefaultStart = '2019-01-01';\r\nconst DefaultEnd = '2019-01-31';\r\nconst DefaultCallTypes = ['FARE VIOLATION'];\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <CallsByTimeAndStation DefaultStart={DefaultStart} DefaultEnd={DefaultEnd} DefaultCallTypes={DefaultCallTypes} />\r\n\r\n      <div style={{display:'flex', margin:'30px auto', width:'80%'}}>\r\n        <div>\r\n          <div style={{fontSize:'2em', padding:25}}>\r\n            \"Fare Violation\" calls per week in 2018\r\n          </div>\r\n          {DataRows_2018}\r\n        </div>\r\n\r\n        <div>\r\n          <div style={{fontSize:'2em', padding:25}}>\r\n            \"Fare Violation\" calls per week in 2019\r\n          </div>\r\n          <div>\r\n            {DataRows_2019}\r\n          </div>\r\n          <br/>\r\n          <div style={{clear:'both', marginTop:4, paddingLeft:45, float:'left', fontStyle:'italic'}}>(2019 isn't over yet, still 10 more bars to come)</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}